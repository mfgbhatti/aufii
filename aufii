#!/usr/bin/env bash
#
# aufii is a fast way to create UEFI-entries.
# This script is hosted at https://github.com/mfgbhatti/aufii. For new features,
# improvements and bugs fill an issue in GitHub or make a pull request.
# Pull Request are welcome!

SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
CONFIG_FILE="${SCRIPT_DIR}/auto-gen-uefi"

# Misc
center() {
	width="$(tput cols)"
	padding="$(printf '%0.1s' \ {1..500})"
	printf '%*.*s %s %*.*s\n' 0 "$(((width - 2 - ${#1}) / 2))" "$padding" "$1" 0 "$(((width - 1 - ${#1}) / 2))" "$padding"
}

title() {
	echo " "
	INPUT="${1//\"/}"
	center "$INPUT"
	echo " "
}

root_check() {
    if [[ "$(id -u)" != "0" ]]; then
        echo -ne "ERROR! This script must be run under the 'root' user!\n"
        exit 0
    fi
}

invalid_option() {
    echo -ne "ERROR! Your selected option is invalid, retry... \n"
}

elements_present() {
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && break; done
}

PROMPT="Please select a valid option: "

# Logo
logo() {
	clear
	center "                       .o88o.  o8o   o8o "
	center "                       888 ''  '''   ''' "
	center " .oooo.   oooo  oooo  o888oo  oooo  oooo "
	center "'P  )88b  '888  '888   888    '888  '888 "
	center " .oP'888   888   888   888     888   888 "
	center "d8(  888   888   888   888     888   888 "
	center "'Y888''8o  'V88V'V8P' o888o   o888o o888o"
	title "Simple interactive tool to create UEFI-boot entries."
}

# Compose [and execute] efibootmgr commands
logo

echo -ne "No changes will be written to disk before confirmation.\n"
read -r -p "Start now (y/n)? " CHOICE
case $CHOICE in
y | Y | yes | Yes | YES)
	# check if the disk is ssd
	if [[ "$(lsblk -n --output TYPE,ROTA | awk '$1=="disk"{print $2}')" -eq "0" ]]; then
		SSD="1"
	else
		SSD="0"
	fi
	mapfile -t PARTITION_LIST <<<"$(lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}')"
	# check if there are partitions on system
	if [[ -z "${PARTITION_LIST[*]}" ]]; then
		echo -ne "ERROR! No partition found!\n"
		exit 0
	else
		echo ""
		echo -ne "Please specify EFI or boot partition\n"
		PS3=$PROMPT
		select EFI in "${PARTITION_LIST[@]}"; do
			if elements_present "$EFI" "${PARTITION_LIST[@]}"; then
				if [[ "$SSD" -eq 1 ]]; then
					DISK=$(echo "$EFI" | awk -F 'p' '{print $1}')
					PART=$(echo "$EFI" | awk -F 'p' '{print $2}')
				else
					DISK=$(echo "$EFI" | awk -F '[0-9]*' '{print $1}')
					PART=$(echo "$EFI" | awk -F '[a-z/]*' '{print $2}')
				fi
				AROT=$(df -hT | grep /$ | awk '{print $1}')
				ROOT=$(blkid -s UUID | grep "$AROT" | awk -F '"' '{print $2}')
				SWAP=$(blkid -s UUID| grep swap | awk -F '"' '{print $2}')
			fi
			break
		done
	fi
	echo ""
	read -r -p "Is your system using swap partition (y/n)? " OPT
	case $OPT in
	y | Y | yes | Yes | YES)
		SWAP_UUID=" resume=UUID=$SWAP"
		;;
	n | N | no | NO | No)
		SWAP_UUID=""
		;;
	esac
	;;
n | N | no | NO | No)
	echo "Aborted by user"
	exit 1
	;;
esac

# Choose kernel and microcode
cd /boot || exit 0
for f in ./*; do
	case $f in
	*intel*) UCODE="initrd=\intel-ucode.img" ;;
	*amd*) UCODE="initrd=\amd-ucode.img" ;;
	*lts*) KERN="-lts";;
	*hard*) KERN="-hardened";;
	*zen*) KERN="-zen";;
	*) 
		KERN=""
		UCODE=""
		;;
	esac
done
cd "$SCRIPT_DIR" || exit 0


# Name
echo ""
read -r -p "Please label the boot entry (press enter Arch-Linux): " STR
if [[ -z "$STR" ]]; then
	STR="Arch-Linux"
fi
NAME=$STR
clear
# ask for partition layouts
echo -ne "Please select you partitioning layout\n"
echo -ne "btrfs means you have root subvolume @ mounted at /\n"
echo -ne "luks means you are using LUKS encrypted root partition\n"
echo -ne "simple will cover everything else\n"
PART_LAYOUT=("btrfs" "luks" "simple")
PS3="$PROMPT"
select OPT in "${PART_LAYOUT[@]}"; do
	if elements_present "$OPT" "${PART_LAYOUT[@]}"; then
		case "$OPT" in
		# Compose commands
		btrfs)
			FLBK="efibootmgr --disk $DISK --part $PART --create --label \"$NAME-Fallback\" --loader /vmlinuz-linux$KERN --unicode 'root=UUID=$ROOT$SWAP_UUID rw rootflags=subvol=@ $UCODE initrd=\initramfs-linux$KERN-fallback.img'"
			LINX="efibootmgr --disk $DISK --part $PART --create --label \"$NAME\" --loader /vmlinuz-linux$KERN --unicode 'root=UUID=$ROOT$SWAP_UUID rw rootflags=subvol=@ $UCODE initrd=\initramfs-linux$KERN.img'"
			;;
		luks)
            echo -ne "Please enter the full path for your root volume\n"
			echo -ne "It should be like /dev/mapper/luks etc\n"
			echo -ne "Remember it should be full path as shown above\n"
			echo -ne "if you have no idea leave it and check online before proceeding\n"
			read -r -p "Enter the full path for your root volume: " LUKS_PATH
			echo " "
			FLBK="efibootmgr --disk $DISK --part $PART --create --label \"$NAME-Fallback\" --loader /vmlinuz-linux$KERN --unicode 'cryptdevice=UUID=$ROOT:luks:allow-discards root=$LUKS_PATH$SWAP_UUID rw $UCODE initrd=\initramfs-linux$KERN-fallback.img'"
			LINX="efibootmgr --disk $DISK --part $PART --create --label \"$NAME\" --loader /vmlinuz-linux$KERN --unicode 'cryptdevice=UUID=$ROOT:luks:allow-discards root=$LUKS_PATH$SWAP_UUID rw $UCODE initrd=\initramfs-linux$KERN.img'"
			;;
		simple)
			FLBK="efibootmgr --disk $DISK --part $PART --create --label \"$NAME-Fallback\" --loader /vmlinuz-linux$KERN --unicode 'root=UUID=$ROOT$SWAP_UUID rw $UCODE initrd=\initramfs-linux$KERN-fallback.img'"
			LINX="efibootmgr --disk $DISK --part $PART --create --label \"$NAME\" --loader /vmlinuz-linux$KERN --unicode 'root=UUID=$ROOT$SWAP_UUID rw $UCODE initrd=\initramfs-linux$KERN.img'"
			;;
		*)
			invalid_option
			;;
		esac
	else
		invalid_option
		break
	fi
	break
done
# Create bash file to execute commands
write_exec() {
	cat <<EOF > "$CONFIG_FILE"
#!/usr/bin/env bash
#
# aufii is a fast way to create UEFI-entries.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.
#
# This script is hosted at https://github.com/mfgbhatti/aufii. For new features,
# improvements and bugs fill an issue in GitHub or make a pull request.
# Pull Request are welcome!
## For further information visit https://linux.die.net/man/8/efibootmgr. or
## https://wiki.archlinux.org/title/EFISTUB for detailed information.
## See man efibootmgr
#
# Generated by aufii
#
$FLBK
$LINX
exit 0
EOF
	chmod +x "$CONFIG_FILE"
	printf %s "Commands written to file $CONFIG_FILE"
}

# Write to disk and execute or abort
echo ""
echo -ne "Create executable bash file to edit or execute later,\n"
echo -ne "create and execute user need to be root (sets UEFI boot entries)\n"
read -r -p "or abort this script (c/ce/a)? " CHOICE
case "$CHOICE" in
c) # write to file
	write_exec ;;
ce) # write to file and execute it
	root_check
	write_exec
	./"$CONFIG_FILE"
	printf %s "Changes written, poweroff and restart, don't reboot."
	;;
a) # abort
	printf %s "Aborted, no changes written to disk.\n"
	;;
*)
	invalid_option
	;;
esac
exit 0
