#!/usr/bin/env bash
#
# aufii is a fast way to create UEFI-entries.
# This script is hosted at https://github.com/mfgbhatti/aufii. For new features,
# improvements and bugs fill an issue in GitHub or make a pull request.
# Pull Request are welcome!

SCRIPT_DIR="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)"
CONFIG_FILE="${SCRIPT_DIR}/auto-gen-uefi"

# Misc
WIDTH="$(tput cols)"
center() {
	padding="$(printf '%0.1s' \ {1..500})"
	printf '%*.*s %s %*.*s\n' 0 "$(((WIDTH - 2 - ${#1}) / 2))" "$padding" "$1" 0 "$(((WIDTH - 1 - ${#1}) / 2))" "$padding"
}

title() {
	echo " "
	INPUT="${1//\"/}"
	center "$INPUT"
	echo " "
}

root_check() {
    if [[ "$(id -u)" != "0" ]]; then
        echo -ne "ERROR! This script must be run under the 'root' user!\n"
        exit 0
    fi
}

invalid_option() {
    echo -ne "ERROR! Your selected option is invalid, retry... \n"
}

elements_present() {
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && break; done
}

PROMPT="Please select a valid option: "

# Logo
logo() {
	clear
	center "                       .o88o.  o8o   o8o "
	center "                       888 ''  '''   ''' "
	center " .oooo.   oooo  oooo  o888oo  oooo  oooo "
	center "'P  )88b  '888  '888   888    '888  '888 "
	center " .oP'888   888   888   888     888   888 "
	center "d8(  888   888   888   888     888   888 "
	center "'Y888''8o  'V88V'V8P' o888o   o888o o888o"
	title "Simple interactive tool to create UEFI-boot entries."
}

# Compose [and execute] efibootmgr commands
logo

# list all partitions of specific disk
list_partitions() {
	# check if there are partitions on system
	if [[ -n "${PARTITION_LIST[*]}" ]]; then
		echo ""
		echo -ne "Please specify EFI or boot partition\n"
		PS3=$PROMPT
		select EFI in "${PARTITION_LIST[@]}"; do
			if elements_present "$EFI" "${PARTITION_LIST[@]}"; then
				if [[ "$SSD" -eq "1" ]]; then
					DISK=$(echo "$EFI" | awk -F 'p' '{print $1}')
					PART=$(echo "$EFI" | awk -F 'p' '{print $2}')
				else
					DISK=$(echo "$EFI" | awk -F '[0-9]*' '{print $1}')
					PART=$(echo "$EFI" | awk -F '[a-z/]*' '{print $2}')
				fi
				AROT=$(df -hT | grep /$ | awk '{print $1}')
				ROOT=$(blkid -s UUID | grep "$AROT" | awk -F '"' '{print $2}')
				SWAP_UUID=$(blkid -s UUID| grep swap | awk -F '"' '{print $2}')
			fi
			break
		done
	else
		echo -ne "ERROR! No partition found!\n"
		exit 0
	fi
}

# check if the disk is ssd
ssd_check() {
	if [[ -n "$1" ]]; then
		KNAME=$(echo "$1" | cut -d '/' -f 3)
		if [[ $(lsblk -n --output TYPE,KNAME,ROTA | grep -E "disk.*$KNAME" | awk '{print $3}') == "0" ]]; then
			SSD="1"
		else
			SSD="0"
		fi
		mapfile -t PARTITION_LIST <<<"$(lsblk -n --output TYPE,KNAME | grep -E "part.*$KNAME" | awk '{print "/dev/"$2}')"
		list_partitions
	else
		if [[ $(lsblk -n --output TYPE,ROTA | awk '$1=="disk"{print $2}') == "0" ]]; then
			SSD="1"
		else
			SSD="0"
		fi
		mapfile -t PARTITION_LIST <<<"$(lsblk | grep 'part' | awk '{print "/dev/" substr($1,3)}')"
		list_partitions
	fi
}
WELCOME="\
Aufii operates under the presumption that your /boot directory exists and contains your microcode and a single Linux kernel. If you are using multiple kernels, do NOT use Aufii, as it is not configured to handle more than one kernel.
The results may differ from your expectations. If you are uncertain about anything, refrain from using Aufii.

Please Note: No changes will be written to disk or executed without your confirmation.
"
fmt -w "$WIDTH" <<< "$WELCOME"

read -r -p "Start now (y/N)? " CHOICE

# default to no
if [[ -z "$CHOICE" ]]; then
	CHOICE="n"
fi

case $CHOICE in
y | Y | yes | Yes | YES)
	mapfile -t DRIVES < <(lsblk -n --output TYPE,KNAME,SIZE | awk '$1=="disk"{print "/dev/"$2}')
	if [[ "${#DRIVES[@]}" -gt "1" ]]; then
		echo "Please specify your system disk: "
		PS3=$PROMPT
		select DRIVE in "${DRIVES[@]}"; do
			if elements_present "$DRIVE" "${DRIVES[@]}"; then
				ssd_check "$DRIVE"
				break
			else
				echo "Error: Cannot find drives"
				break
			fi
		done
	else
		ssd_check
	fi

	echo ""
	read -r -p "Is your system using swap partition (y/N)? " OPT
	if [[ -z "$OPT" ]]; then
		OPT="N"
	fi
	case $OPT in
	y | Y | yes | Yes | YES)
		# SWAP_UUID="resume=UUID=$SWAP"
		SWAP="1"
		;;
	n | N | no | NO | No)
		# SWAP_UUID=""
		SWAP="0"
		;;
	*)
		invalid_option
		;;
	esac
	;;
n | N | no | NO | No)
	echo "Aborted by user"
	exit 1
	;;
*)
	invalid_option
	;;
esac

# Choose kernel and microcode
cd /boot || exit 0
for f in ./*; do
	case $f in
	*intel*) UCODE="initrd=\intel-ucode.img" ;;
	*amd*) UCODE="initrd=\amd-ucode.img" ;;
	*lts*) KERN="-lts";;
	*hard*) KERN="-hardened";;
	*zen*) KERN="-zen";;
	*)
		KERN=""
		;;
	esac
done
cd "$SCRIPT_DIR" || exit 0


# Name
echo ""
read -r -p "Please label the boot entry (press enter Arch-Linux): " STR
if [[ -z "$STR" ]]; then
	STR="Arch-Linux"
fi
NAME=$STR
clear
# ask for partition layouts
logo
printf "Please select your partitioning layout:\n"
printf "  - 'btrfs' indicates that you have a Btrfs filesystem with the root subvolume mounted at '/'.\n"
printf "  - 'luks' indicates that you are using an encrypted root partition with LUKS (Linux Unified Key Setup).\n"
printf "  - 'simple' will cover any other partitioning schemes.\n"
printf "\n"

# variable for command (short)
PRE_LINX="efibootmgr --disk $DISK --part $PART --create --label \"$NAME\" --loader /vmlinuz-linux$KERN"
PRE_FLBK="efibootmgr --disk $DISK --part $PART --create --label \"$NAME-Fallback\" --loader /vmlinuz-linux$KERN"
POST_LINX="$UCODE initrd=\initramfs-linux$KERN.img'"
POST_FLBK="$UCODE initrd=\initramfs-linux$KERN-fallback.img'"

PART_LAYOUT=("btrfs" "lvm" "luks" "simple")
PS3="$PROMPT"
select OPT in "${PART_LAYOUT[@]}"; do
	if elements_present "$OPT" "${PART_LAYOUT[@]}"; then
		case "$OPT" in
		# Compose commands
		btrfs)
			if [[ "$SWAP" == "1" ]]; then
				UNICODE="--unicode 'root=UUID=$ROOT resume=UUID=$SWAP_UUID"
			else
				UNICODE="--unicode 'root=UUID=$ROOT"
			fi

				LINX="$PRE_LINX $UNICODE rw rootflags=subvol=@ $POST_LINX"
				FLBK="$PRE_FLBK $UNICODE rw rootflags=subvol=@ $POST_FLBK"
			;;
		lvm)
            printf "If you're unsure, it's best to leave this option and check online for guidance before proceeding.\n"
            printf "You can use commands such as 'vgdisplay' and 'lvdisplay' to gather information about your volume groups and logical volumes, respectively.\n"
			read -r -p "Please enter the name of the volume group: " LVM_VG
			read -r -p "Please enter the name of the logical volume for root: " LVM_NAME
			if [[ "$SWAP" == "1" ]]; then
				UNICODE="--unicode 'root=/dev/$LVM_VG/$LVM_NAME resume=UUID=$SWAP_UUID"
			else
				UNICODE="--unicode 'root=/dev/$LVM_VG/$LVM_NAME"
			fi
            LINX="$PRE_LINX $UNICODE rw $POST_LINX"
			FLBK="$PRE_FLBK $UNICODE rw $POST_FLBK"
			;;
		luks)
            printf "Please enter the full path for your root volume:\n"
            printf "  - It should be in the format like '/dev/mapper/luks', indicating the path to your encrypted volume.\n"
            printf "  - Ensure it's the complete path as shown above.\n"
            printf "  - If you're unsure, it's advisable to leave this field blank and seek guidance online before proceeding.\n"

			read -r -p "Enter the full path for your root volume: " LUKS_PATH
			echo " "
			if [[ "$SWAP" == "1" ]]; then
				UNICODE="--unicode 'cryptdevice=UUID=$ROOT:luks:allow-discards root=$LUKS_PATH resume=UUID=$SWAP_UUID"
			else
				UNICODE="--unicode 'cryptdevice=UUID=$ROOT:luks:allow-discards root=$LUKS_PATH"
			fi
			LINX="$PRE_LINX $UNICODE rw $POST_LINX"
			FLBK="$PRE_FLBK $UNICODE rw $POST_FLBK"
			;;
		simple)
			if [[ "$SWAP" == "1" ]]; then
				UNICODE="--unicode 'root=UUID=$ROOT resume=UUID=$SWAP_UUID"
			else
				UNICODE="--unicode 'root=UUID=$ROOT"
			fi
			LINX="$PRE_LINX $UNICODE rw $POST_LINX"
			FLBK="$PRE_FLBK $UNICODE rw $POST_FLBK"
			;;
		*)
			invalid_option
			;;
		esac
	else
		invalid_option
		break
	fi
	break
done
# Create bash file to execute commands
write_exec() {
	CONFIG_MSG="$(cat <<EOF
!/usr/bin/env bash

aufii is a fast way to create UEFI-entries.
This program is free software: you can redistribute it and/or modify it under the terms of the
GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>.

This script is hosted at https://github.com/mfgbhatti/aufii. For new features, improvements and bugs fill an issue in GitHub or make a pull request. Pull Request are welcome! For further information visit https://linux.die.net/man/8/efibootmgr. or https://wiki.archlinux.org/title/EFISTUB for detailed information.

See man efibootmgr

Generated by aufii

EOF
)"
    fmt <<< "$CONFIG_MSG" > "$CONFIG_FILE"
    sed -i '1s/^./#&/;1!s/^./# &/' "$CONFIG_FILE"
    printf "%s\n" "$FLBK" >> "$CONFIG_FILE"
    printf "%s\n"  "$LINX" >> "$CONFIG_FILE"

	chmod +x "$CONFIG_FILE"
	printf %s "Commands written to file $CONFIG_FILE"
}

# Write to disk and execute or abort1s/^./#&/
Q_ASK="\
Create executable bash file to edit or execute later, create and execute, user need to be root (sets UEFI boot entries)
"
fmt -w "$WIDTH" <<<"$Q_ASK"
read -r -p "or abort this script (c/ce/a)? " CHOICE
case "$CHOICE" in
c) # write to file
	write_exec ;;
ce) # write to file and execute it
	root_check
	write_exec
	./"$CONFIG_FILE"
	printf %s "Changes written, poweroff and restart, don't reboot."
	;;
a) # abort
	printf %s "Aborted, no changes written to disk.\n"
	;;
*)
	invalid_option
	;;
esac
exit 0
